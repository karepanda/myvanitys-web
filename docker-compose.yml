---
version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:13
    container_name: postgres-db
    environment:
      POSTGRES_USER: myvanitys
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: myvanitysdb
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - myvanitys-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myvanitys -d myvanitysdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Backend
  api:
    build:
      context: ../myvanitys-api
      dockerfile: Dockerfile
    container_name: myvanitys-api
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/myvanitysdb
      - SPRING_DATASOURCE_USERNAME=myvanitys
      - SPRING_DATASOURCE_PASSWORD=secret
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - JAVA_OPTS=-Xmx512m -Xms256m
      - GOOGLE_CLIENT_ID=780556869332-1sf3nmlm6df03r73jnh8a5kll8ev3ifo.apps.googleusercontent.com
      - GOOGLE_CLIENT_SECRET=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
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - myvanitys-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/myvanitys/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Frontend con Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: myvanitys-frontend
    ports:
      - "5173:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - myvanitys-network
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local

networks:
  myvanitys-network:
    driver: bridge